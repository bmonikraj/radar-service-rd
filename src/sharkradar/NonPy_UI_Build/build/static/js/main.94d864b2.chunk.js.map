{"version":3,"sources":["Theme.js","Components/Header/index.js","Components/Header/style.js","Components/Footer/index.js","Components/Footer/style.js","Components/TabContent/index.js","Components/TabContent/style.js","Components/Panel/index.js","Components/Panel/style.js","Components/Dashboard/index.js","Components/Dashboard/style.js","serviceWorker.js","index.js","App.js"],"names":["MainTheme","colorPrimary","colorSecondary","colorTertiary","colorBackground","withStyles","theme","body","background","position","top","left","width","headerRow","display","justifyContent","padding","brandName","color","fontSize","fontWeight","forkOnGithub","border","borderColor","borderWidth","forkOnGithubIcon","children","classes","className","href","bottom","contentMessage","textAlign","contentVersion","hyperlink","TabContent","props","handleChange","setState","switch","state","timestamp","Date","toUTCString","data","downloadData","updateTimeStamp","bind","downloadFullData","this","_this_","t","Axios","get","dataURL","then","response","catch","error","alert","limit","prompt","setInterval","Fragment","statusRow","timeStamp","onClick","filename","separator","onChange","checked","React","Component","margin","tabTitle","textTransform","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wKAAaA,EAAY,CACvBC,aAAe,UACfC,eAAiB,UACjBC,cAAgB,UAChBC,gBAAkB,W,eCYLC,MCdM,SAAAC,GAAK,MAAK,CAE7BC,KAAO,CACLC,WAAaF,EAAMJ,eACnBO,SAAW,WACXC,IAAM,MACNC,KAAO,MACPC,MAAQ,QAGVC,UAAY,CACVC,QAAU,OACVC,eAAiB,gBACjBC,QAAU,QAGZC,UAAY,CACVC,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,QAGfC,aAAe,CACbH,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,OACbE,OAAS,QACTC,YAAcjB,EAAML,aACpBuB,YAAc,MACdR,QAAU,OAGZS,iBAAmB,CACjBP,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,OACbJ,QAAU,SDtBCX,CAXA,SAAC,GAAkC,EAAjCqB,SAAkC,IAAxBC,EAAuB,EAAvBA,QAAuB,sCAChD,OACE,yBAAKC,UAAWD,EAAQpB,MACtB,yBAAKqB,UAAWD,EAAQd,WACtB,0BAAMe,UAAWD,EAAQV,WAAzB,cAA+C,+BAAO,iEAAtD,eACA,0BAAMW,UAAWD,EAAQN,cAAzB,WAA+C,uBAAGO,UAAWD,EAAQF,iBAAkBI,KAAK,2CAA0C,kBAAC,IAAD,YEG/HxB,MCXM,SAAAC,GAAK,MAAK,CAE7BC,KAAO,CACLC,WAAaF,EAAMJ,eACnBO,SAAW,QACXqB,OAAS,MACTnB,KAAO,MACPC,MAAQ,QAGVmB,eAAiB,CACfb,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,OACbY,UAAY,UAGdC,eAAiB,CACff,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,SACbY,UAAY,UAGdE,UAAY,CACVhB,MAAQZ,EAAML,gBDdHI,CARA,SAAC,GAAkC,EAAjCqB,SAAkC,IAAxBC,EAAuB,EAAvBA,QAAuB,sCAChD,OACE,yBAAKC,UAAWD,EAAQpB,MACtB,uBAAGqB,UAAWD,EAAQI,gBAAgB,4CAAtC,wCAAgG,uBAAGH,UAAWD,EAAQO,UAAWL,KAAK,2CAAtC,UAAuF,kBAAC,IAAD,OAAvL,IAA2M,0BAAMD,UAAWD,EAAQM,gBAAzB,kC,iHEC3ME,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAWRC,aAAe,WACb,EAAKC,SAAS,CAACC,QAAU,EAAKC,MAAMD,UAXpC,EAAKC,MAAQ,CACXD,QAAS,EACTE,UAAY,eAAc,IAAIC,MAAOC,cACrCC,KAAO,GACPC,aAAe,IAEjB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBATR,E,+EAiBhB,GAAGE,KAAKT,MAAMD,OAAO,CACnB,IAAIW,EAASD,KACTE,GAAI,IAAIT,MAAOC,cACnBM,KAAKX,SAAS,CAACG,UAAY,cAAcU,IAEzCC,IAAMC,IAAIJ,KAAKb,MAAMkB,QAAQ,OAC5BC,KAAK,SAASC,GACbN,EAAOZ,SAAS,CAACM,KAAOY,EAASZ,SAElCa,MAAM,SAASC,GACdC,MAAM,kC,yCAMV,IAAIT,EAASD,KACTW,EAAQC,OAAO,+CAAgD,OACzD,MAAPD,GACDR,IAAMC,IAAIJ,KAAKb,MAAMkB,QAAQ,IAAIM,GAChCL,KAAK,SAASC,GACbN,EAAOZ,SAAS,CAACO,aAAeW,EAASZ,SAE1Ca,MAAM,SAASC,GACdC,MAAM,iC,0CAMVG,YAAYb,KAAKH,gBAAiB,O,+BAIlC,OACE,kBAAC,IAAMiB,SAAP,KACE,yBAAKnC,UAAWqB,KAAKb,MAAMT,QAAQpB,MACjC,yBAAKqB,UAAWqB,KAAKb,MAAMT,QAAQqC,WACjC,yBAAKpC,UAAWqB,KAAKb,MAAMT,QAAQsC,WAChChB,KAAKT,MAAMC,WAEd,6BACIQ,KAAKb,MAAMY,kBAAoB,kBAAC,IAAD,CAAiBkB,QAASjB,KAAKD,mBAC9DC,KAAKb,MAAMY,kBAAoB,kBAAC,UAAD,CAASmB,SAAU,eAAelB,KAAKT,MAAMC,UAAU,YAAaG,KAAMK,KAAKT,MAAMK,aAAcuB,UAAW,KAC7I,kBAAC,IAAD,QAGJ,yBAAKxC,UAAWqB,KAAKb,MAAMT,QAAQY,QAAnC,4CAC0C,kBAAC,IAAD,CAAQ8B,SAAUpB,KAAKZ,aAAciC,QAASrB,KAAKT,MAAMD,WAGrG,yBAAKX,UAAWqB,KAAKb,MAAMT,QAAQiB,MAChCK,KAAKb,MAAMV,gB,GAtEC6C,IAAMC,WA8EhBnE,MCrFM,SAAAC,GAAK,MAAK,CAC7BC,KAAO,CACHC,WAAaF,EAAMF,gBACnBY,QAAU,OAEdgD,UAAY,CACVlD,QAAU,OACVC,eAAiB,iBAEnBkD,UAAY,GAGZ1B,OAAS,GAGTK,KAAO,KDsEMvC,CAAkB8B,GExDlB9B,MC7BM,SAAAC,GAAK,MAAK,CAC7BC,KAAO,CACLC,WAAaF,EAAMF,gBACnBqE,OAAS,OAEXC,SAAW,CACTxD,MAAQZ,EAAMJ,eACdyE,cAAgB,eDsBLtE,CAxBD,SAAC,GAAkC,EAAjCqB,SAAkC,IAAxBC,EAAuB,EAAvBA,QAAuB,sCAC/C,OACE,yBAAKC,UAAWD,EAAQpB,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,0BAAMqB,UAAWD,EAAQ+C,UAAzB,sBACL,kBAAC,IAAD,KAAK,0BAAM9C,UAAWD,EAAQ+C,UAAzB,2BACL,kBAAC,IAAD,KAAK,0BAAM9C,UAAWD,EAAQ+C,UAAzB,0BAGT,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAYhD,SAAU,uCAAkBsB,kBAAkB,EAAOM,QAAS,gCAE9E,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAY5B,SAAU,uCAAkBsB,kBAAkB,EAAMM,QAAS,gCAE7E,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAY5B,SAAU,uCAAkBsB,kBAAkB,EAAMM,QAAS,sCEPtEjD,MCfM,SAAAC,GAAK,MAAK,CAC7BE,WAAa,CACXA,WAAaF,EAAMF,mBDaRC,CAVG,SAAC,GAAkC,EAAjCqB,SAAkC,IAAxBC,EAAuB,EAAvBA,QAAuB,sCACnD,OACE,yBAAKC,UAAWD,EAAQnB,YACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SEAcoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBCAG,WACjB,OACI,kBAAC,gBAAD,CAAe5E,MAAON,GACpB,kBAAC,EAAD,QDHQ,MAASmF,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC,gB","file":"static/js/main.94d864b2.chunk.js","sourcesContent":["export const MainTheme = {\n  colorPrimary : '#d65a31',\n  colorSecondary : '#222831',\n  colorTertiary : '#393e46',\n  colorBackground : '#eeeeee'\n}\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { IoLogoGithub } from 'react-icons/io';\nimport { style } from './style';\n\nconst Header = ({children, classes, ...props}) => {\n  return (\n    <div className={classes.body}>\n      <div className={classes.headerRow}>\n        <span className={classes.brandName}>Sharkradar <small><em>[Service Registry and Discovery]</em></small> Dashboard </span>\n        <span className={classes.forkOnGithub}>Fork on <a className={classes.forkOnGithubIcon} href=\"https://github.com/bmonikraj/sharkradar\"><IoLogoGithub/></a></span>\n      </div>\n    </div>\n  );\n}\n\nexport default withStyles(style)(Header);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  \n  body : {\n    background : theme.colorSecondary,\n    position : 'relative',\n    top : '0px',\n    left : '0px',\n    width : '100%',\n  },\n\n  headerRow : {\n    display : 'flex',\n    justifyContent : 'space-between',\n    padding : '20px'\n  },\n\n  brandName : {\n    color : theme.colorPrimary,\n    fontSize : '24px',\n    fontWeight : 'bold'\n  },\n\n  forkOnGithub : {\n    color : theme.colorPrimary,\n    fontSize : '24px',\n    fontWeight : 'bold',\n    border : 'solid',\n    borderColor : theme.colorPrimary,\n    borderWidth : '1px',\n    padding : '5px'\n  },\n\n  forkOnGithubIcon : {\n    color : theme.colorPrimary,\n    fontSize : '24px',\n    fontWeight : 'bold',\n    padding : '5px'\n  }\n})\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { IoLogoGithub } from 'react-icons/io';\nimport { style } from './style';\n\nconst Footer = ({children, classes, ...props}) => {\n  return (\n    <div className={classes.body}>\n      <p className={classes.contentMessage}><em>\"Sharkradar\"</em> is an Open Source project hosted on <a className={classes.hyperlink} href=\"https://bmonikraj.github.com/sharkradar\">Github <IoLogoGithub/></a> <span className={classes.contentVersion}>[Current Version : v1.1.3]</span></p>\n    </div>\n  );\n}\n\nexport default withStyles(style)(Footer);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  \n  body : {\n    background : theme.colorSecondary,\n    position : 'fixed',\n    bottom : '0px',\n    left : '0px',\n    width : '100%'\n  },\n\n  contentMessage : {\n    color : theme.colorPrimary,\n    fontSize : '16px',\n    fontWeight : 'bold',\n    textAlign : 'center'\n  },\n\n  contentVersion : {\n    color : theme.colorPrimary,\n    fontSize : '14px',\n    fontWeight : 'normal',\n    textAlign : 'center'\n  },\n\n  hyperlink : {\n    color : theme.colorPrimary\n  }\n})\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport \"react-tabs/style/react-tabs.css\";\nimport Switch from \"react-switch\";\nimport { GoDesktopDownload, GoCloudDownload } from 'react-icons/go';\nimport { style } from './style';\nimport Axios from 'axios';\nimport { CSVLink } from \"react-csv\";\n\nclass TabContent extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      switch : true,\n      timestamp : \"Data as of \"+new Date().toUTCString(),\n      data : [],\n      downloadData : []\n    };\n    this.updateTimeStamp = this.updateTimeStamp.bind(this);\n    this.downloadFullData = this.downloadFullData.bind(this)\n  }\n\n  handleChange = () => {\n    this.setState({switch : !this.state.switch})\n  }\n\n  updateTimeStamp () {\n    if(this.state.switch){\n      var _this_ = this;\n      var t = new Date().toUTCString()\n      this.setState({timestamp : \"Data as of \"+t})\n      var limit = '50';\n      Axios.get(this.props.dataURL+\"/\"+limit)\n      .then(function(response){\n        _this_.setState({data : response.data})\n      })\n      .catch(function(error){\n        alert(\"Error while fetching data\")\n      })\n    }\n  }\n\n  downloadFullData() {\n    var _this_ = this;\n    var limit = prompt(\"How many latest records you want to fetch ? \", \"250\");\n    if(limit!=null){\n      Axios.get(this.props.dataURL+\"/\"+limit)\n      .then(function(response){\n        _this_.setState({downloadData : response.data})\n      })\n      .catch(function(error){\n        alert(\"Error while fetching data\")\n      })\n    }\n  }\n\n  componentDidMount(){\n    setInterval(this.updateTimeStamp, 5000)\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <div className={this.props.classes.body}>\n          <div className={this.props.classes.statusRow}>\n            <div className={this.props.classes.timeStamp}>\n              {this.state.timestamp}\n            </div>\n            <div>\n              { this.props.downloadFullData && <GoCloudDownload onClick={this.downloadFullData}/>}\n              { this.props.downloadFullData && <CSVLink filename={\"sharkaradar-\"+this.state.timestamp+\"-data.csv\"} data={this.state.downloadData} separator={\",\"}>\n                <GoDesktopDownload/>\n              </CSVLink>}\n            </div>\n            <div className={this.props.classes.switch}>\n             Fetch data from Server every 5 seconds : <Switch onChange={this.handleChange} checked={this.state.switch} />\n            </div>\n          </div>\n          <div className={this.props.classes.data}>\n            {this.props.children}\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default withStyles(style)(TabContent);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  body : {\n      background : theme.colorBackground,\n      padding : '2px'\n  },\n  statusRow : {\n    display : 'flex',\n    justifyContent : 'space-between',\n  },\n  timeStamp : {\n\n  },\n  switch : {\n\n  },\n  data : {\n    \n  }\n})\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\nimport TabContent from '../TabContent/index';\nimport { style } from './style';\n\nconst Panel = ({children, classes, ...props}) => {\n  return (\n    <div className={classes.body}>\n      <Tabs>\n        <TabList>\n            <Tab><span className={classes.tabTitle}>Real Time Monitor</span></Tab>\n            <Tab><span className={classes.tabTitle}>Discovery Monitor Logs</span></Tab>\n            <Tab><span className={classes.tabTitle}>Service Monitor Logs</span></Tab>\n        </TabList>\n    \n        <TabPanel>\n            <TabContent children={<h1>Hello 1</h1>} downloadFullData={false} dataURL={\"/monitor-real-time/current\"}/>\n        </TabPanel>\n        <TabPanel>\n            <TabContent children={<h1>Hello 2</h1>} downloadFullData={true} dataURL={\"/monitor-real-time/service\"}/>\n        </TabPanel>\n        <TabPanel>\n            <TabContent children={<h1>Hello 3</h1>} downloadFullData={true} dataURL={\"/monitor-real-time/discovery\"}/>\n        </TabPanel>\n    </Tabs>\n    </div>\n  );\n}\n\nexport default withStyles(style)(Panel);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  body : {\n    background : theme.colorBackground,\n    margin : '5px'\n  },\n  tabTitle : {\n    color : theme.colorSecondary,\n    textTransform : 'uppercase'\n  }\n})\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { style } from './style';\nimport Header from '../Header/index';\nimport Footer from '../Footer/index';\nimport Panel from '../Panel/index';\n\nconst Dashboard = ({children, classes, ...props}) => {\n  return (\n    <div className={classes.background}>\n      <Header/>\n      <Panel/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default withStyles(style)(Dashboard);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  background : {\n    background : theme.colorBackground,\n  }\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { ThemeProvider } from 'react-jss';\nimport { MainTheme } from './Theme.js';\nimport Dashboard from './Components/Dashboard/index';\n\nexport const App = () => {\n  return (\n      <ThemeProvider theme={MainTheme}>\n        <Dashboard/>\n      </ThemeProvider>\n    );\n}\n"],"sourceRoot":""}