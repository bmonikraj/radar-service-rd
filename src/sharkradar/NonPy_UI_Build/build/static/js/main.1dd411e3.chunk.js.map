{"version":3,"sources":["Theme.js","Components/Header/index.js","Components/Header/style.js","Components/Footer/index.js","Components/Footer/style.js","Components/Dashboard/index.js","Components/Dashboard/style.js","serviceWorker.js","index.js","App.js"],"names":["MainTheme","colorPrimary","colorSecondary","colorTertiary","colorBackground","withStyles","theme","body","background","position","top","left","width","headerRow","display","justifyContent","padding","brandName","color","fontSize","fontWeight","forkOnGithub","border","borderColor","borderWidth","children","classes","className","href","bottom","contentMessage","textAlign","contentVersion","hyperlink","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAAaA,EAAY,CACvBC,aAAe,UACfC,eAAiB,UACjBC,cAAgB,UAChBC,gBAAkB,W,eCYLC,MCdM,SAAAC,GAAK,MAAK,CAE7BC,KAAO,CACLC,WAAaF,EAAMJ,eACnBO,SAAW,QACXC,IAAM,MACNC,KAAO,MACPC,MAAQ,QAGVC,UAAY,CACVC,QAAU,OACVC,eAAiB,gBACjBC,QAAU,QAGZC,UAAY,CACVC,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,QAGfC,aAAe,CACbH,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,OACbE,OAAS,QACTC,YAAcjB,EAAML,aACpBuB,YAAc,MACdR,QAAU,SDfCX,CAXA,SAAC,GAAkC,EAAjCoB,SAAkC,IAAxBC,EAAuB,EAAvBA,QAAuB,sCAChD,OACE,yBAAKC,UAAWD,EAAQnB,MACtB,yBAAKoB,UAAWD,EAAQb,WACtB,0BAAMc,UAAWD,EAAQT,WAAzB,cAA+C,+BAAO,iEAAtD,eACA,0BAAMU,UAAWD,EAAQL,cAAzB,WAA+C,uBAAGO,KAAK,2CAA0C,kBAAC,IAAD,YEG1FvB,MCXM,SAAAC,GAAK,MAAK,CAE7BC,KAAO,CACLC,WAAaF,EAAMJ,eACnBO,SAAW,QACXoB,OAAS,MACTlB,KAAO,MACPC,MAAQ,QAGVkB,eAAiB,CACfZ,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,OACbW,UAAY,UAGdC,eAAiB,CACfd,MAAQZ,EAAML,aACdkB,SAAW,OACXC,WAAa,SACbW,UAAY,UAGdE,UAAY,CACVf,MAAQZ,EAAML,gBDdHI,CARA,SAAC,GAAkC,EAAjCoB,SAAkC,IAAxBC,EAAuB,EAAvBA,QAAuB,sCAChD,OACE,yBAAKC,UAAWD,EAAQnB,MACtB,uBAAGoB,UAAWD,EAAQI,gBAAgB,4CAAtC,wCAAgG,uBAAGH,UAAWD,EAAQO,UAAWL,KAAK,2CAAtC,UAAuF,kBAAC,IAAD,OAAvL,IAA2M,0BAAMD,UAAWD,EAAQM,gBAAzB,kCEOlM3B,MCbM,SAAAC,GAAK,MAAK,CAC7BE,WAAa,CACXA,WAAaF,EAAMF,mBDWRC,CATG,SAAC,GAAkC,EAAjCoB,SAAkC,IAAxBC,EAAuB,EAAvBA,QAAuB,sCACnD,OACE,yBAAKC,UAAWD,EAAQlB,YACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,SEEc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBCAG,WACjB,OACI,kBAAC,gBAAD,CAAelC,MAAON,GACpB,kBAAC,EAAD,QDHQ,MAASyC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1dd411e3.chunk.js","sourcesContent":["export const MainTheme = {\n  colorPrimary : '#204969',\n  colorSecondary : '#08FFC8',\n  colorTertiary : '#DADADA',\n  colorBackground : '#FFF7F7'\n}\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { IoLogoGithub } from 'react-icons/io';\nimport { style } from './style';\n\nconst Header = ({children, classes, ...props}) => {\n  return (\n    <div className={classes.body}>\n      <div className={classes.headerRow}>\n        <span className={classes.brandName}>Sharkradar <small><em>[Service Registry and Discovery]</em></small> Dashboard </span>\n        <span className={classes.forkOnGithub}>Fork on <a href=\"https://github.com/bmonikraj/sharkradar\"><IoLogoGithub/></a></span>\n      </div>\n    </div>\n  );\n}\n\nexport default withStyles(style)(Header);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  \n  body : {\n    background : theme.colorSecondary,\n    position : 'fixed',\n    top : '0px',\n    left : '0px',\n    width : '100%',\n  },\n\n  headerRow : {\n    display : 'flex',\n    justifyContent : 'space-between',\n    padding : '20px'\n  },\n\n  brandName : {\n    color : theme.colorPrimary,\n    fontSize : '24px',\n    fontWeight : 'bold'\n  },\n\n  forkOnGithub : {\n    color : theme.colorPrimary,\n    fontSize : '24px',\n    fontWeight : 'bold',\n    border : 'solid',\n    borderColor : theme.colorPrimary,\n    borderWidth : '1px',\n    padding : '5px'\n  }\n})\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { IoLogoGithub } from 'react-icons/io';\nimport { style } from './style';\n\nconst Footer = ({children, classes, ...props}) => {\n  return (\n    <div className={classes.body}>\n      <p className={classes.contentMessage}><em>\"Sharkradar\"</em> is an Open Source project hosted on <a className={classes.hyperlink} href=\"https://bmonikraj.github.com/sharkradar\">Github <IoLogoGithub/></a> <span className={classes.contentVersion}>[Current Version : v1.1.3]</span></p>\n    </div>\n  );\n}\n\nexport default withStyles(style)(Footer);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  \n  body : {\n    background : theme.colorSecondary,\n    position : 'fixed',\n    bottom : '0px',\n    left : '0px',\n    width : '100%'\n  },\n\n  contentMessage : {\n    color : theme.colorPrimary,\n    fontSize : '16px',\n    fontWeight : 'bold',\n    textAlign : 'center'\n  },\n\n  contentVersion : {\n    color : theme.colorPrimary,\n    fontSize : '14px',\n    fontWeight : 'normal',\n    textAlign : 'center'\n  },\n\n  hyperlink : {\n    color : theme.colorPrimary\n  }\n})\n","import React from 'react';\nimport withStyles from 'react-jss';\nimport { style } from './style';\nimport Header from '../Header/index';\nimport Footer from '../Footer/index';\n\nconst Dashboard = ({children, classes, ...props}) => {\n  return (\n    <div className={classes.background}>\n      <Header/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default withStyles(style)(Dashboard);\n","import {createUseStyles} from 'react-jss';\n\nexport const style = theme => ({\n  background : {\n    background : theme.colorBackground,\n  }\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { ThemeProvider } from 'react-jss';\nimport { MainTheme } from './Theme.js';\nimport Dashboard from './Components/Dashboard/index';\n\nexport const App = () => {\n  return (\n      <ThemeProvider theme={MainTheme}>\n        <Dashboard/>\n      </ThemeProvider>\n    );\n}\n"],"sourceRoot":""}